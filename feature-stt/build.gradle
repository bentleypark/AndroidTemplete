plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.github.ben-manes.versions' version "0.36.0"
}

android {
    compileSdkVersion Config.compileSdkVersion
    buildToolsVersion "30.0.2"

    defaultConfig {
        minSdkVersion Config.minSdkVersion
        targetSdkVersion Config.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        dataBinding = true
        viewBinding = true
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    lintOptions {
        abortOnError false
        disable 'UnsafeExperimentalUsageError', 'UnsafeExperimentalUsageWarning', 'ContentDescription'
    }
}

dependencies {
    implementation project(Modules.data)
    implementation project(Modules.resources)
    implementation project(Modules.commonUi)

    implementation Libs.kotlinStdLib
    implementation Libs.appcompat
    implementation Libs.legacySupport
    implementation Libs.liveData
    implementation Libs.viewModel
    implementation Libs.material
    implementation Libs.constraintlayout
    implementation Libs.fragmentKtx
    implementation Libs.activityKtx
    implementation Libs.liveData
    implementation Libs.viewModel
    implementation Libs.commonJava8

    // Coroutine
    implementation Libs.coroutineAndroid
    implementation Libs.coroutineCore

    // RxJava
    implementation Libs.rxJava
    implementation Libs.rxAndroid

    // Square
    implementation Libs.retrofit

    implementation Libs.koinViewModel
    implementation Libs.koinFragment

    // Debug
    implementation Libs.timber
//    implementation Libs.sentry
}

kapt {
    useBuildCache = true
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}